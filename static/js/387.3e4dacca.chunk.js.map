{"version":3,"file":"static/js/387.3e4dacca.chunk.js","mappings":"6SAEMA,EAAM,mCACNC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAAgCC,EAAhC,+BAAuC,EACtCC,EADD,UACUH,EADV,uCACiDD,EADjD,iBAC6DG,GAD7D,SAEkBE,EAAAA,GAAAA,IAAUD,GAF5B,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,EAAKC,SAHP,mEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFACCL,EADD,UACUH,EADV,kBAC4BQ,EAD5B,oBAC+CT,GAD/C,SAEkBK,EAAAA,GAAAA,IAAUD,GAF5B,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,GAHF,kEAMA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gFACCP,EADD,UACUH,EADV,iCAC2CD,EAD3C,iCACuEW,GADvE,SAEkBN,EAAAA,GAAAA,IAAUD,GAF5B,cAECQ,EAFD,yBAGEA,EAASN,KAAKC,SAHhB,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAuBJ,GAAvB,kFACCL,EADD,UACUH,EADV,kBAC4BQ,EAD5B,4BACuDT,GADvD,SAEkBK,EAAAA,GAAAA,IAAUD,GAF5B,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,GAHF,kEAKA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAyBL,GAAzB,kFACCL,EADD,UACUH,EADV,kBAC4BQ,EAD5B,4BACuDT,GADvD,SAEkBK,EAAAA,GAAAA,IAAUD,GAF5B,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,EAAKC,SAHP,kEAlBPL,G,uICRaa,EAAaC,EAAAA,GAAAA,IAAH,2LAUVC,EAASD,EAAAA,GAAAA,GAAH,4LAUNE,EAAKF,EAAAA,GAAAA,GAAH,yCAGFG,EAAMH,EAAAA,GAAAA,IAAH,uKASHI,EAAWJ,EAAAA,GAAAA,IAAH,8DAKRK,EAAIL,EAAAA,GAAAA,EAAH,mEAIDM,EAAaN,EAAAA,GAAAA,EAAH,0D,SCtCVO,EAAO,WAClB,IAAQd,GAAYe,EAAAA,EAAAA,MAAZf,QACR,GAA0BgB,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRf,EAAAA,EAAAA,IAAQJ,GAASoB,KAAKF,EACvB,GAAE,CAAClB,IAECiB,GAKH,SAAC,EAAD,UACGA,EAAMI,KAAKC,OAAS,GACnB,SAAC,EAAD,UACGL,EAAMI,KAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACd,UAAC,EAAD,YACE,SAAC,EAAD,CACEC,IACEH,EACI,kCAAoCA,EACpC,8DAENI,IAAKH,EACLI,MAAM,MACNC,OAAO,SAET,UAAC,EAAD,YACE,SAAC,EAAD,UAAOL,KACP,UAAC,EAAD,yBAA2BC,UAbnBH,EADE,OAoBlB,qCA3BG,IA+BV,C","sources":["components/API/API.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '0e93aabbe6940ffc57eaa3a18a147920';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getPopularMovies(page = 1) {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${KEY}&page=${page}`;\n  const { data } = await axios.get(url);\n  return data.results;\n}\ngetPopularMovies();\n\nexport async function getAllMovies(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function getSearchMovies(query) {\n  const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&query=${query}`;\n  const response = await axios.get(url);\n  return response.data.results;\n}\nexport async function getCast(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\nexport async function infoActor(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`;\n  const { data } = await axios.get(url);\n  return data.results;\n}\n","import styled from 'styled-components';\n\nexport const SectionDiv = styled.div`\n  padding: 20px;\n  margin: 0 auto;\n  max-width: 1280px;\n  border-bottom: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const UlCast = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  /* align-items: center; */\n  justify-content: center;\n  gap: 20px;\n  list-style: none;\n  padding: 0px;\n  margin: 0px;\n`;\nexport const Li = styled.li`\n  width: 200px;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n  border-radius: 5px;\n  /* object-fit: cover; */\n  /* width: 200x;\n  height: 320px; */\n`;\nexport const DivDescr = styled.div`\n  padding-top: 8px;\n  width: 200px;\n`;\n\nexport const P = styled.p`\n  margin: 0 0 10px 0;\n  font-size: 18px;\n`;\nexport const PCharacter = styled.p`\n  margin: 0;\n  font-size: 18px;\n`;\n","import { getCast } from '../API/API';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as SC from './Cast.styled';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    getCast(movieId).then(setMovie);\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  return (\n    <SC.SectionDiv>\n      {movie.cast.length > 0 ? (\n        <SC.UlCast>\n          {movie.cast.map(({ id, profile_path, name, character }) => (\n            <SC.Li key={id}>\n              <SC.Img\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                    : 'https://dummyimage.com/200x300/858585/fff.jpg&text=No+photo'\n                }\n                alt={name}\n                width=\"200\"\n                height=\"240\"\n              />\n              <SC.DivDescr>\n                <SC.P>{name}</SC.P>\n                <SC.PCharacter>Character: {character}</SC.PCharacter>\n              </SC.DivDescr>\n            </SC.Li>\n          ))}\n        </SC.UlCast>\n      ) : (\n        <p>No cast</p>\n      )}\n    </SC.SectionDiv>\n  );\n};\n"],"names":["KEY","BASE_URL","getPopularMovies","page","url","axios","data","results","getAllMovies","movieId","getSearchMovies","query","response","getCast","infoActor","SectionDiv","styled","UlCast","Li","Img","DivDescr","P","PCharacter","Cast","useParams","useState","movie","setMovie","useEffect","then","cast","length","map","id","profile_path","name","character","src","alt","width","height"],"sourceRoot":""}